//SQL, Structured Query Language
//SQLite Relational Database Management System (RDBMS).


//statement is text that the database recognizes as a valid command.
//Statements always end in a semi-colon ;.


/* Use this to comment in SQL
over multiple lines*/

--Use this to comment on a single line

--https://www.codecademy.com/articles/sql-commands

--commands DO NOT have to be uppercase, they will still work!
--line breaks aren't needed in SQL

CREATE TABLE celebs (
	id INTEGER,
  name TEXT,
  age INTEGER
  );
--creates table with 3 columns: id, name, & age

INSERT INTO celebs (id, name, age)
VALUES (1, 'Justin Beiber', 21);
--INSERT INTO is a clause that adds the specified row or rows.
--(id, name, age) is a parameter identifying the columns that data will be inserted into.
--VALUES is a clause that indicates the data being inserted

INSERT INTO celebs (id, name, age)
VALUES (2, 'Beyonce Knowles', 33);

INSERT INTO celebs (id, name, age)
VALUES (3, 'Jeremy Lin', 26);

INSERT INTO celebs (id, name, age)
VALUES (4, 'Taylor Swift', 26);

SELECT name FROM celebs;
--Returns one column showing all of the names
SELECT * FROM celebs;
--Select = darabase query -- this shows the entire table
-- * - select ALL COLUMNS**

ALTER TABLE celebs
ADD COLUMN twitter_handle TEXT;

UPDATE celebs
SET twitter_handle = '@taylorswift13'
WHERE id = 4;

DELETE FROM celebs
WHERE twitter_handle IS NULL;
--deleted everyone except taylor Swift

select * WHERE (column name) (operator or ----)
operators: < > = != >= <=
----------------------------------------------------------------

SELECT * FROM awards;

CREATE TABLE awards (
   id INTEGER PRIMARY KEY,
   recipient TEXT NOT NULL,
   award_name TEXT DEFAULT
'Grammy'
);
/*Data types:  **PRIMARY KEY columns can be used to uniquely identify the row.
**UNIQUE columns have a different value for every row.
This is similar to PRIMARY KEY but a table can have many different UNIQUE columns.
**NOT NULL columns must have a value.
**DEFAULT additional argument as assumed value for an inserted row if does not specify*/
----------------------------------------------------------------
----------------------------------------------------------------
/* Section 2 - Queries*/
--table_name = movies
--columns: id, name, genre, year, imdb_rating
SELECT column1, column2
FROM table_name;
or
SELECT name, genre, year FROM awards;

SELECT name AS 'Titles'
FROM movies;
AS is a keyword in SQL that allows you to rename a column or table using an alias.
--columns have not been renamed in the table!!! The aliases only appear in the result.

SELECT DISTINCT tools
FROM inventory;
DISTINCT is used to return unique values in the output.
It filters out all duplicate values in the specified column(s).
--doesn't automatically sort (ie year earliest to latest)

----------------------------------------------------------------
WHERE

select * --all columns
FROM table_name
WHERE (column name) (operator - LIKE - IS NULL - BETWEEN - ORDER BY)
	AND (column name) (operator - LIKE - IS NULL - BETWEEN - ORDER BY) --combines mult conditions

operators: < > = != >= <=, (WHERE year > 2000;)

LIKE --not case sensitive
_ = wildcard (WHERE name LIKE 'Se_en'; = will return Seven and Se7en
% = wildcard (WHERE name LIKE '%man%;')
'man%' - begin with "man" (Man of Steel)
'%man' - end with "man" (Iron Man, Batman, Rain Man)
'%man%' movies containing word man (Batman, Man of Steel, Spider-Man 2)

IS NULL - unknown/missing values
SELECT name FROM movies WHERE imdb_rating IS NOT NULL;

BETWEEN two letters is not inclusive of the 2nd letter.
BETWEEN two numbers is inclusive of the 2nd number.
SELECT * FROM movies WHERE name BETWEEN 'A' AND 'J';
"A" UP TO BUT NOT INCLUDING "J" (American Sniper, Inside Out)
SELECT * FROM movies WHERE year BETWEEN 1990 AND 1999;
Includes year 1999!

SELECT * FROM movies
WHERE year BETWEEN 1990 AND 1999
   AND genre = 'romance';
----------------------------------------------------------------
ORDER BY, LIMIT, CASE

SELECT name, year FROM movies ORDER BY name;
ORDER BY year DESC; ASC --descending and ascending
--column ORDER BY doesn't have to display (select name from students order by score;)

SELECT name, year FROM movies LIMIT 10;
LIMIT maximum number of results, always go at end of Query

SELECT name,
 CASE
  WHEN imdb_rating > 8 THEN 'Fantastic'
  WHEN imdb_rating > 6 THEN 'Poorly Received'
  ELSE 'Avoid at All Costs'
 END
FROM movies;
CASE = if/then logic -- comes b/w SELECT AND FROM & auto creates 2nd column
--Just using END will create a column named "case when imdb_rating > 8 .....thru 'avoid at all costs'
--to rename column:
END AS REVIEW --column name is now "Review"
FROM movies;

----------------------------------------------------------------
----------------------------------------------------------------

/* Section 3 - Aggregate-Functions*/
--table_name = fake_apps
--columns: id, name, category, downloads, price

COUNT(): count the number of rows
SUM(): the sum of the values in a column
MAX()/MIN(): the largest/smallest value
AVG(): the average of the values in a column
ROUND(): round the values in the column

SELECT COUNT(*) FROM table_name;
--COUNT() w/o * would just count # of non empty values in column

SELECT ROUND(price, 0) FROM fake_apps; --result will be only column "Price"
select round(avg(price), 2) --average of all prices, rounded to 2 decimal places = 2.02


SELECT year,
   AVG(imdb_rating)
FROM movies
GROUP BY year        GROUP BY After WHERE, Before ORDER BY or LIMIT
ORDER BY year;

select category, price, avg(downloads) --1, 2, 3
from fake_apps
group by 1, 2;
/* result:
category, price, avg(downloads)
books			0($)	10000
books			1($)	1000
business	0			5000
business  1			200*/

HAVING - similar to WHERE except filters groups instead of individual rows/values
after GROUP BY but before ORDER BY, LIMIT

SELECT price,
   ROUND(AVG(downloads)),
   COUNT(*)
FROM fake_apps
GROUP BY price
HAVING COUNT(Category)>10;
--returns the average downloads (rounded) and the number of apps â€“ at each price point (3 columns)
--HAVING clause to restrict the query to price points that have more than 10 apps.
--price points 0, 1, 2, 3, 4, 15  - this removed 4$ and all associated # of downloads
